-- TRIGGERs 'BEFORE INSERT'

CREATE TABLE TAB_FATURAMENTO
(DATA_VENDA DATE, TOTAL_VENDA FLOAT);

SELECT * FROM CLIENTES;
SELECT * FROM VENDEDORES;
SELECT * FROM NOTAS;
SELECT * FROM ITENS_NOTAS;
SELECT * FROM TAB_FATURAMENTO;

DELETE FROM ITENS_NOTAS;
DELETE FROM NOTAS;

-- Entering the first billing
INSERT INTO NOTAS (NUMERO, DATA_VENDA, CPF, MATRICULA, IMPOSTO)
VALUES ('0100', '2019-05-08', '1471156710', 235, 0.10);
INSERT INTO ITENS_NOTAS (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES('0100', '1000889', 100, 10);
INSERT INTO ITENS_NOTAS (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES('0100', '1002334', 100, 10);

-- Entering the second billing
INSERT INTO NOTAS (NUMERO, DATA_VENDA, CPF, MATRICULA, IMPOSTO)
VALUES ('0101', '2019-05-08', '1471156710', 235, 0.10);
INSERT INTO ITENS_NOTAS (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES('0101', '1000889', 100, 10);
INSERT INTO ITENS_NOTAS (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES('0101', '1002334', 100, 10);

-- Entering the third billing
INSERT INTO NOTAS (NUMERO, DATA_VENDA, CPF, MATRICULA, IMPOSTO)
VALUES ('0103', '2019-12-08', '1471156710', 235, 0.10);
INSERT INTO ITENS_NOTAS (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES('0103', '1000889', 100, 10);
INSERT INTO ITENS_NOTAS (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES('0103', '1002334', 100, 10);


-- The select that returns the billing of the day
SELECT A.DATA_VENDA, A.NUMERO, SUM(B.QUANTIDADE*B.PRECO) AS TOTAL_VENDA FROM 
NOTAS A INNER JOIN ITENS_NOTAS B
ON A.NUMERO = B.NUMERO
GROUP BY A.DATA_VENDA, A.NUMERO;

-- now the insertion
INSERT INTO TAB_FATURAMENTO
SELECT A.DATA_VENDA, SUM(B.QUANTIDADE*B.PRECO) AS TOTAL_VENDA FROM 
NOTAS A INNER JOIN ITENS_NOTAS B
ON A.NUMERO = B.NUMERO
GROUP BY A.DATA_VENDA;

SELECT * FROM TAB_FATURAMENTO;

-- The trigger needs to update the tab_faturamento always that a new selling occurs
-- Something like this:


DELETE FROM TAB_FATURAMENTO;
INSERT INTO TAB_FATURAMENTO
SELECT A.DATA_VENDA, SUM(B.QUANTIDADE*B.PRECO) AS TOTAL_VENDA FROM 
NOTAS A INNER JOIN ITENS_NOTAS B
ON A.NUMERO = B.NUMERO
GROUP BY A.DATA_VENDA;
/*
Cleaning the NOTAS and INTES_NOTAS tables:
Error Code: 1451. Cannot delete or update a parent row: a foreign key constraint fails
	To remember that we must delete from the child table before deleting from the parent table
*/


DELIMITER //
-- THE 'DELIMITER //' is used so the DBMS don't interpret ';' as the end of the command
CREATE TRIGGER TG_CALCULA_FATURAMENTO_INSERT 
AFTER INSERT ON ITENS_NOTAS FOR EACH ROW BEGIN
	DELETE FROM TAB_FATURAMENTO;
	INSERT INTO TAB_FATURAMENTO
	SELECT A.DATA_VENDA, SUM(B.QUANTIDADE*B.PRECO) AS TOTAL_VENDA FROM 
	NOTAS A INNER JOIN ITENS_NOTAS B
	ON A.NUMERO = B.NUMERO
	GROUP BY A.DATA_VENDA;
END //
